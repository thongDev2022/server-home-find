// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id     String    @id @default(uuid())
  username    String
  email       String    @unique
  password    String
  phoneNumber Int
  role        Role @default(user) // user, admin , owner
  profile     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model Apartment {
  id            Int             @id @default(autoincrement())
  ownerId       Int?
  title         String
  description   String
  address       Address[]
  images        Image[]
  price         Float
  priceBooking  Float
  status        ApartmentStatus @default(available) // available, booked, full, under_maintenance
  apartmentType String
  badRoom       Int
  convenience   Json
  otherService  Json
  bookings      Booking[] 
  categoryId    Int?
  category      Category?       @relation(fields: [categoryId], references: [id])
  createdBy     String          @default("owner")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  paymentStatus PaymentStatus   @default(unpaid)// paid, unpaid, pending
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  apartments  Apartment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Booking {
  id          Int           @id @default(autoincrement())
  userId      String
  apartmentId Int
  startDate   DateTime
  endDate     DateTime?
  totalPrice  Float         @default(0.0)
  status      BookingStatus @default(pending) // pending, confirmed, cancelled 
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  apartment   Apartment     @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
}

model Address {
  id          Int       @id @default(autoincrement())
  village     String
  district    String
  province    String
  apartmentId Int       @unique
  apartment   Apartment @relation(fields: [apartmentId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Image {
  id          Int       @id @default(autoincrement())
  apartmentId Int
  url         String
  public_id    String
  apartment   Apartment @relation(fields: [apartmentId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  user
  admin
}

enum ApartmentStatus {
  available
  booked
  full
  under_maintenance
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum PaymentStatus {
  paid
  unpaid
  pending
}
